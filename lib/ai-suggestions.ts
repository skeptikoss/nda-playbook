import type { ClauseRule, PartyPerspective } from '@/types';
import { getClauseRule } from './clause-matcher';
import { supabase } from './supabase';

export interface AISuggestion {
  originalText: string;
  suggestedText: string;
  reasoning: string;
  partyPerspective: PartyPerspective;
  ruleType: 'starting_position' | 'fallback' | 'not_acceptable';
  confidence: number;
}

export interface AISuggestionError {
  success: false;
  error: string;
  fallbackSuggestion?: string;
}

export interface AISuggestionSuccess {
  success: true;
  data: AISuggestion;
}

export type AISuggestionResult = AISuggestionSuccess | AISuggestionError;

/**
 * OpenAI API integration for generating contextual rewriting suggestions
 * Note: This is a placeholder for OpenAI integration - actual API key needed
 */
async function generateOpenAISuggestion(
  originalText: string,
  rule: ClauseRule,
  partyPerspective: PartyPerspective
): Promise<string> {
  // For MVP, we'll simulate OpenAI API call
  // In production, this would make actual API calls to OpenAI
  
  const apiKey = process.env.OPENAI_API_KEY;
  
  if (!apiKey) {
    throw new Error('OpenAI API key not configured');
  }

  const prompt = `${rule.rewriting_prompt}

Original clause text: "${originalText}"

Party perspective: ${partyPerspective}
Rule type: ${rule.rule_type}
Guidance: ${rule.guidance_notes}
Example: ${rule.example_language}

Please provide a rewritten version that better aligns with the ${partyPerspective} party's interests according to the rule type "${rule.rule_type}".`;

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-4-turbo-preview',
        messages: [
          {
            role: 'system',
            content: 'You are a legal expert specializing in NDA contract analysis and drafting. Provide clear, professional clause rewrites that align with the specified party perspective and legal strategy.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 500,
        temperature: 0.3,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data.choices || data.choices.length === 0) {
      throw new Error('No suggestion generated by OpenAI');
    }

    return data.choices[0].message.content.trim();
    
  } catch (error) {
    console.error('OpenAI API error:', error);
    throw error;
  }
}

/**
 * Generate template-based fallback suggestions when AI is unavailable
 */
function generateTemplateSuggestion(
  originalText: string,
  rule: ClauseRule,
  partyPerspective: PartyPerspective
): string {
  // Use the example language from the rule as a fallback
  if (rule.example_language) {
    return rule.example_language;
  }

  // Generic fallback suggestions based on party perspective and rule type
  const templates = {
    receiving: {
      starting_position: 'Consider revising to limit scope to specifically marked confidential information with comprehensive standard exceptions including publicly available information, independently developed materials, and information required to be disclosed by law.',
      fallback: 'Suggest including reasonable exceptions for publicly available information and pre-existing knowledge while maintaining necessary confidentiality protections.',
      not_acceptable: 'This clause requires significant revision to protect the receiving party\'s interests. Consider narrowing the scope and adding standard business exceptions.'
    },
    disclosing: {
      starting_position: 'Consider strengthening this clause to provide comprehensive protection for all shared information with minimal exceptions limited to truly public information.',
      fallback: 'Suggest maintaining adequate protection for material business information while allowing reasonable standard exceptions.',
      not_acceptable: 'This clause provides insufficient protection. Consider expanding the scope to cover various forms of business information with appropriate confidentiality safeguards.'
    },
    mutual: {
      starting_position: 'Consider ensuring balanced protection for both parties with reciprocal obligations and fair treatment of confidential information.',
      fallback: 'Suggest maintaining proportionate protection with reasonable exceptions that treat both parties equitably.',
      not_acceptable: 'This clause creates unbalanced treatment. Revise to provide equal protection and obligations for both parties with symmetric terms.'
    }
  };

  return templates[partyPerspective][rule.rule_type];
}

/**
 * Main function to generate AI-powered suggestions for clause improvements
 */
export async function generateClauseSuggestion(
  originalText: string,
  ruleId: string,
  partyPerspective: PartyPerspective,
  useAI: boolean = true
): Promise<AISuggestionResult> {
  try {
    // Fetch the rule details
    const rule = await getClauseRule(ruleId);
    
    if (!rule) {
      return {
        success: false,
        error: 'Rule not found',
        fallbackSuggestion: 'Consider reviewing this clause against standard legal practices.'
      };
    }

    let suggestedText: string;
    let reasoning: string;
    let confidence: number;

    try {
      if (useAI && process.env.OPENAI_API_KEY) {
        // Try AI-powered suggestion first
        suggestedText = await generateOpenAISuggestion(originalText, rule, partyPerspective);
        reasoning = `AI-generated suggestion based on ${partyPerspective} party perspective and ${rule.rule_type} rule requirements. ${rule.guidance_notes}`;
        confidence = 0.85;
      } else {
        throw new Error('AI not available, using template');
      }
    } catch (aiError) {
      // Fallback to template-based suggestion
      console.log('Using template fallback:', aiError);
      suggestedText = generateTemplateSuggestion(originalText, rule, partyPerspective);
      reasoning = `Template-based suggestion for ${partyPerspective} party perspective. ${rule.guidance_notes}`;
      confidence = 0.65;
    }

    return {
      success: true,
      data: {
        originalText,
        suggestedText,
        reasoning,
        partyPerspective,
        ruleType: rule.rule_type,
        confidence
      }
    };

  } catch (error) {
    console.error('Suggestion generation error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      fallbackSuggestion: generateTemplateSuggestion(originalText, { 
        rule_type: 'fallback',
        guidance_notes: 'General guidance',
        example_language: ''
      } as ClauseRule, partyPerspective)
    };
  }
}

/**
 * Generate suggestions for missing clauses
 */
export async function generateMissingClauseSuggestion(
  clauseName: string,
  partyPerspective: PartyPerspective
): Promise<AISuggestionResult> {
  try {
    // Fetch the starting position rule for this clause and party perspective
    const { data: rules, error } = await supabase
      .from('clause_rules')
      .select('*')
      .eq('rule_type', 'starting_position')
      .eq('party_perspective', partyPerspective);

    if (error) {
      throw new Error(`Failed to fetch rules: ${error.message}`);
    }

    const relevantRule = rules.find((rule: any) => 
      clauseName.toLowerCase().includes('definition') && rule.clause_id.includes('definition') ||
      clauseName.toLowerCase().includes('duration') && rule.clause_id.includes('duration') ||
      clauseName.toLowerCase().includes('governing') && rule.clause_id.includes('governing')
    );

    if (!relevantRule) {
      return {
        success: false,
        error: 'No relevant rule found for missing clause',
        fallbackSuggestion: `Consider adding a ${clauseName} clause that aligns with ${partyPerspective} party interests.`
      };
    }

    const suggestedText = relevantRule.example_language || generateTemplateSuggestion('', relevantRule, partyPerspective);
    
    return {
      success: true,
      data: {
        originalText: '[MISSING CLAUSE]',
        suggestedText,
        reasoning: `Suggested ${clauseName} clause for ${partyPerspective} party perspective based on starting position requirements.`,
        partyPerspective,
        ruleType: 'starting_position',
        confidence: 0.75
      }
    };

  } catch (error) {
    console.error('Missing clause suggestion error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      fallbackSuggestion: `Consider adding a comprehensive ${clauseName} clause.`
    };
  }
}

/**
 * Batch generate suggestions for multiple matches
 */
export async function generateBatchSuggestions(
  matches: Array<{
    originalText: string;
    ruleId: string;
    partyPerspective: PartyPerspective;
  }>
): Promise<Array<AISuggestionResult>> {
  const suggestions = await Promise.all(
    matches.map(match => 
      generateClauseSuggestion(
        match.originalText,
        match.ruleId,
        match.partyPerspective,
        true // Use AI when available
      )
    )
  );

  return suggestions;
}

// For development/testing without OpenAI API key
export const mockAISuggestion = {
  success: true as const,
  data: {
    originalText: 'All information disclosed shall be deemed confidential',
    suggestedText: '"Confidential Information" means information specifically marked as "Confidential" or "Proprietary" by the disclosing party, excluding information that is: (a) publicly available through no breach of confidentiality, (b) independently developed by the receiving party, (c) already known to the receiving party prior to disclosure, or (d) required by law to be disclosed.',
    reasoning: 'Revised to favor receiving party by limiting scope to marked information and including comprehensive standard exceptions for public information, independent development, prior knowledge, and legal requirements.',
    partyPerspective: 'receiving' as PartyPerspective,
    ruleType: 'starting_position' as const,
    confidence: 0.92
  }
};